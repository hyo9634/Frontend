1. 함수
    - 프로그래밍 언어에서 함수란 무엇인가요?
        - 문제 해결을 위한 논리적인 흐름을 문장으로 구현하고, 코드 블럭으로 감싸서 
    
    - 함수를 사용하는 이유
        - 문제 해결을 위해서 로직을 구현하고, 이를 재사용하기 위해
        - 함수는 함수 정의에 의해 생성되어서 동작한다.
    
            ex) function add(x,y){
                return x + y;
                    }
                add(2,5); 
                //function call, invoke 
                //x,y와 개수를 맞추어서 쓰기
                => 정확하게 설명할 수 있어야 함 

    * undefind : statement를 처리완료했다는 표현

    - 함수리터럴
        - 자바스크립트에서 함수는 객체 타입의 값
        - 함수리터럴은 function 키워드, 함수이름, 배개변수, 함수 몸체(body)로 구성된다.

            => let fuc1 = function add(x, y) { //함수 리터럴을 변수  func1에 할당하였다.
                        rerturn x+y;
                        };
        - 리터럴 : 사람이 이해할 수 있는 문자 or 약속된 기호 사용하여 값을 생성하는 표기방식
                   값을 생성하기 위한 표기법(한 번 보면 알 수 있게)
                   내부에서만 처리할 수 있는 식별자다. (외부에서 호출할 수 없다)

    1. 함수정의
        -선언, 표현식, 함수 생성 시점, 함수 호이스팅
            function add(x+y) {return x+y;}; //함수 선언문 정의
            var sub = function (x+y) {return x-y;}; //함수 표현식 정의
                -> 보통 함수식은 변수호이스팅

        - 함수 선언문 함수(런타임 이전에 자바 스트립트 엔진에 의해 먼저 실행)
            -> 런타임 이전에 함수객체 생성
                자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 생성하고 생성된 함수 객체를 할당

        - 함수 호이스팅 : 함수 선언문이 코드의 끌올처럼 동작하는 자바스크립트 고유의 특징
            -> 함수 표현식 함수는 함수의 생성 시점이 다르다.
                변수에 함수 리터럴이 할당됨.
                런타임에 실행된다.
                REST API 프로젝트에서는 함수 표현식을 이용하여 작업 (더 명확하게 처리가능. 권장)
                    -> let add = function (x,y) {return x+y;}


        - function 생성자 함수
            => let add 

        -화살표 함수 : 로 내부 간략화

        =========== 화살표 함수 표현식으로 바꾸기 ===========================
        function sum (a.b) {let result = a+b; rerturn result}
        let sum = (a,b) => a,b
            consol.log{sum(4,5)}
        
        alert('yes') = modal(독립적인, 어느 곳과도 상호작용이 불가한) 윈도우
        =====================================================================

        - prompt의 사용
            result = prompt{'회원가입을 하시겠습니까?'}
            let age = prompt{'나이를 입력해주세요',''};
            alert('당신의 나이는 $(age)살 입니다.');

        let result = confirm('당신의 성별은 남성입니까?');
        alert(result1);

        - alert() 메세지 보여주기 (확인창, 모달(modal))
        - prompt() 사용자에게 텍스트를 입력하라는 메시지를 띄우고 : 확인 사용자가 입력한 문자열이 반환, 취소(null반환)
        - confirm() 사용자가 확인 또는 취소 버튼을 누를때까지 메세지창이 보여지고 확인 버튼(true), 취소(false)

    2. 함수호출
        -매개변수 와 인수
        -인수 확인
        -매개변수의 최대 개수
        -반환문
    3. 참조에 의해서 전달되는 값, 상태 변경

    4. JSON과 JSON처리 메서드
    복잡한 객체를 다룰 것
    네트워트를 통해 어딘가로 보내거나, 로깅 목적으로 객체를 출력해야 하는 상황
    객체를 문자열로 전환하여 처리해야 한다.

    JSON(JavaSCript Object Notation) :  값이나 객체를 나타내는 데이터 범용 포맷 (RFC1627)
    - JSON.Stringify 메소드 : 객체를 JSON으로 변환
    - JSON.parse 메소드 : JSON을 객체로 변환

2. 다양한 함수
    -즉시 실행 함수 : 함수정의와 동시에 호출되는 함수
                      모두 호출

    -재귀 함수 : 자신을 다시 호출: 재귀호출(recursive call)
                 재귀 호출을 수행하는 함수
        
        //일반 함수
        function countDown(number){
            for(let i = number; i >=0 ; i--) consol.log(i);}
        
        //일반함수 -> 재귀함수 리팩토링
        function countDown (number) {
        if(number < 0) return;
        console.log(number);
        countDown(number-1);//자기자신을 부름 재귀함수 부분
        }
    
        재귀함수 문제) 
            3! = 3*2*1
            -> if문으로
            function Factorial(number) {
                if(number <= 1) rerturn 1;
                    rerturn number * Factorial(number-1);
                }
                    consol.log(Factorial(숫자0,1,2...))

            -> while문으로
            function Factorial(number) {
                if(number <= 1) rerturn 1;
                    let result = number;
                        while(--number) result += number;
                            return result;
                }

    -중첩 함수 :
        함수내에 함수를 정의한 함수를 중첩함수
        중첩함수는 외부 함수 내부에서만 호출가능

    -콜백 함수(repeat) : 
        1. 함수의 매개변수를 통해서 다른 함수의 내부로 전달되는 함수
        2. 매개변수를 통해서 함수의 외부에서 콜백함수를 전달받은 함수를 Higher-Oder-function(HOP고차함수)
        3. 콜백함수는 고차함수에 호출되고, 고차함수는 필요에 따라 콜벡함수에 인수를 전달 할 수 있다.

        ex: 세탁기를 세탁행위를 하지만 모드가 다르며 모드에 따라 행동이 달라짐
        
        자바스크립트의 함수는 1급 객체 이므로 기능을 전달 받아서 수행가능
        내부의 로직에 영향받지X

    -화살표함수 : 딱 한 번만 실행됨

    * (): 그룹연산자, 함수객체를 생성해서 연산을 한 번에 처리하기 위해서 사용

3. 클로저, 실행 컨텍스트

4.DOM

5. 정규표현식

6. 이벤트

====================== NODE ==============================
7. 비동기 프로그래밍

8. AJax

9. REAT API

10. 프로미스

11. 제너레이터
    -ASYNC
    -AWAIT

12. 에러 처리