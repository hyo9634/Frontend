========지난 시간 리뷰==========
1. 자바스크립트 : 웹페이지 조작을 위해 만들어짐

-웹페이지의 기본 : 데이터를 관리 (어딘가에 저장하고 출력하여 정제된 데이터를 활용)

-변수와 상수(데이터를 담는 메모리) 필요
    변수 : 값이 변할 수 있는 메모리 -선언 키워드 : var, let
    상수 : 값이 변할 수 없는 메모리 -선언 키워드 : const
    => 데이터 재사용 가능, 해당 데이터에 접근하기 위해 필요하다.

-변수와 상수를 사용하기 위한 단계
    1. 선언 : 변수의 이름을 알려주는 행위  let, var, const 세가지로 선언
    2. 할당 : 변수에 데이터를 담아주는 행위 (데이터를 지정된 메모리(변수의 이름) 저장)

-변수와 상수의 특징
    중복으로 선언할 수 있는 지(재선언 여부, 재할당 여부)

    var : 재선언 (0), 재할당(0)
    let : 재선언 (x), 재할당(0)
    const : 재선언 (x), 재할당(0)

    변수명 지정 시 명사로 지정하길 권장

2. 데이터 타입 (자료형)
    문자열(String) - " ", ' ' 가능
                     '+' => 연결연산자, 'hello'+"123' -> 'hello123'
    숫자(Number)
        -산술연산자 +,-,*,/,%
         : 숫자가 아닌 다른 데이터타입으로 산술연산자 시, NaN(Not a Number)
            ex "a" + 12 =>
               "a" + 12 => NaN

        -boolean
        -undefined
        -null
        -symbol
        -Bigint
        -Object
3. 배열(array), 객체(Object)

    여러 개의 데이터가 순서와 함께 저장하고 싶을 때 사용하는 자료구조 (저장창고)
        elt makeArr = ["1",2",null,undefined,Object]

    배열은 데이터의 저장 순서 = 인덱스 (Index)

    index => 요소에 순서를 부여하고 해당요소에 접근이 가능 하도록 지원

    array.length     (배열의 길이를 제공)
    array.push()     (배열의 가장 뒤에 데이터 추가)
    array.pop()      (배열의 가장 뒤의 데이터 삭제)
    array.includes() (특정 배열에 주어진 데이터가 포함되었는지 확인)
    array.indexOf()  (특정 배열에서 지정된 요소를 찾을 수 있는 첫번째 인덱스 반환)

4. 객체(Object)
    const people = ['신세계', 180, 80, 'SSGINC'] //각 요소의 의미를 알 수 없음

        객체는 키 값을 통해 데이터가 무엇에 대한 데이터인지 명시해줄 수 있다.
        객체를 {}로 정의 (객체로 선언하겠다)

    elt userData = {
            namne : '신세계',    
            age : 20.
            height : 180
            weight : 80
            companyn : 'SSGINC'
        }
        
    객체 안의 데이터 하나하나를 프로퍼티(Property) ==> key와  vlaue 를 묶은 것 
        
    객체 Property에 접근하기

    객체의 프로퍼티에 접근하려면 key값에 접근해서 vlaue를 가지고 온다
        Dot notaitn(점 표기법)
        Bracker notaitn (괄호  표기법)

        userData["namne"] 로 지정해야 객체의 key로 인식하여 처리한다. name => 변수

    객체 메소드 (내장 메소드)
        Object.keys() : 객체의 key만을 가져와 배열에 담아주는 메서드
        Object.vlaues() :겍체의  vlaue만 가져와 배열에 담아주는 매서드

5. 함수(Function)
             어떤 기능을 수행하거나 계산을 수행할 수 있는 도구
             입력데이터(매개변수, parameter)가 필요, 입력데이터를 처리(logic prosessor), 입력데이터를 처리한 결과 데이터(반환 데이터, return 값)
             Function sayHello() {
                consol.log ('안녕하세요')
             }
             도구를 활용하려면(함수를 선언하여 함수의 호출) : sayHello()

             HTMl의 태그에는 부여할 수 있는 속성(Property)이 존재한다.
             id, class 속성  onClick() ==> 이벤트(event)
             해당 태그에 사용자에 의해 클릭이벤트가 발생했을때, 할당되어 있는 수식, 코드를 실행하라
              = 어떤 데이터가 입력되거나 입력된 것을 처리할 때 이벤트를 기반으로 동작을 처리함(이벤트드리븐방식)

6. querySelector (태그선택) : Js내에서 HTML 요소의 객체 값을 참조할 때 사용하는 기능

7. 함수의 리턴 (함수 내부에 존재하는 데이터 또는 연산의 결과를 외부로 전달하는 기능)
    return 명령어를 사용
    return 뒤에 오는 데이터를 함수를 호출했던 전달해 준다.

    const sum = function(){         //익명함수 ==>호이스팅할때 다시 설명하겠음
        let result = 10 + 10;
        return result;
    }

    const sum = function() => {     //화살표 함수 표기법 가능
        let result = 10 + 10;
        return result;
    }

    let returnData = sum()
    consol.log(returnData);

8. <ul></ul> <ol></ol> <li></li>

9. DOM : HTML 문서를 파싱(구성된 요소를 분석하고 이해하여 활용하여 DOM이라는 트리구조 형태의 생성된 객체 = 구문분석)
         DOM Tree (DOM 트리 구조) -  요소들을 노드(Node)
         - Document : 문서(Document) 노드, DOM에 진입할 수 있는 집입점 역할
         - HTMl : Document를 제외하고 최상위의 위피 (root node) : Only one
         - Head, body, title, div ....
            요소(Element) 노드 (속성(Element))을 가질 수 있는 유일한 노드
         -src = "..." , id = "..." => 속성 노드 (Attribute)

         -<p>안녕</p> "안녕"-> 텍스트 노드(Text Node) ,  childNode, left Node

Document.getElementByTagName('p').itenm[0]  => Element 노드의 이름을 체크해서 해당 Element를 참조
Document.getElementById('demo') => Element 노드을 id체크해서 해당 Element 참조
Document.querySelector(.id(#")) =>id를 기반으로 class(".")를 참조
Document.querySelectorAll() => 배열의 형태로 모든 요소를 참조
document.createElement() => 새 노드 생성. node형태는 생성하지만 DOM에는 직접 추가하지 않는다.
document.appendchild() => Element Node를 현재 DOM에 추가


=> document를 활용하여 Js내부로 각각의 node들을 참조할 수 있다.

10. 반복문 (while, for, for-in(객체), for of)
    for(최초식; 조건식; 증감문){ 반복을 수행할 코드 }
    최초식 : let i =0
    조건식 : i < 10
    증감문 : i =i+1 i++ (--)

11. for-of (배열에서 주로 사용)
    const arr - [1,2,3,4,5]
    for(let e of arr) {
    consol.log(e)
    }

    for-in(객체에서 주로 사용)


12. 스코프(scope) : 식별자의 유효범위

    scope => 전역 스코프, 지역 스코프 

    선언된 변수가 어떤 범위까지 유효한지 
    어디서나 접근이 가능한지(충돌 방지를 위해)
    적절한 메모리 관리

    자바스크립트에서 지역스코프를 생성하는 종류
    1. 함수레벨 scope
    2. 블록레벨 scope(ES6 : let, const )

    참조가능한 유효범위의 경계를 조건문, 반복문을 포함한 코드블럭 {} 으로 할지,
    오직 함수의 코드 블럭으로 할지

    스코프 체인(Scope Chain) : 
        자바스크립트는 렉시컬 스코프 우선 원칙(정적 스코프 Static Scope)
        함수를 호출한 곳이 아닌 선언한 곳을 기준으로 스코프를 결정한다. 
        같은 이름을 가지고 있는 영역의 변수는 더 큰 영역의 스코프의 변수를 참조한다.
    
    호이스팅 : 함수, 변수의 선언이 마치 위로 끌어올려진 것처럼 동작하는 것
                쓸만큼의 영역만 선정하여 사용해라
    
    변수
    * 선언 -> 초기화 -> 할당
        1. 선언 : 선언한 변수를 식별자가 담기는 객체에 할당하는 단계
        2. 초기화 : 변수에 할당할 메모리 공간을 부여하는 단계 (공간이 생김)
        3. 할당 : 정의된 변수에 데이터가 할당되는 단계 (식별자 == 변수명)
    
    elt, const                     선언단계 ====(TDZ :  Temporal Dead Zone)====> 초기화단계
    var 키워드 TDZ가 존재하지 않음 선언단계 => 초기화 => 할당단계 
